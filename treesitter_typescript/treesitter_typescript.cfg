[n.global]
output = treesitter_typescript

[n.include]
$output/typescript/typescript/src

[n.prepare]
gitoutput.lang = "typescript"
gitremote.lang = "https://github.com/tree-sitter/tree-sitter-typescript"
gitsparse.lang = """
common/*.h
typescript/src/*.h
typescript/src/*.c
typescript/src/*.cc
"""

[n.exclude]
parser.h
typescript.nim

[treesitter_typescript/typescript/typescript/src/parser.h]
create = """
typedef struct TSLanguage TSLanguage;
const TSLanguage *tree_sitter_typescript();
"""

[treesitter_typescript/typescript.nim]
create = """
import treesitter/api
import strutils
const
  sourcePath = currentSourcePath().split({'\\', '/'})[0..^2].join("/")
  headerlang = sourcePath & "/typescript/typescript/src/parser.h"
  ext = when "typescript" in @["css", "javascript", "rust", "scala", "typescript"]: "c" else: "cc"

{.passC: "-I$1/typescript/typescript/src" % sourcePath.}
{.compile: ("../treesitter_typescript/typescript/typescript/src/parser.c", "parsertypescript.o").}
{.compile: ("../treesitter_typescript/typescript/typescript/src/scanner." & ext, "scannertypescript.o").}

proc treeSittertypescript*(): ptr TSLanguage {.stdcall, importc: "tree_sitter_typescript", header: headerlang.}
"""
